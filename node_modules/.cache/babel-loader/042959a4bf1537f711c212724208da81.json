{"ast":null,"code":"import _toConsumableArray from\"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import SelectedGameListings from'../GameListings/SelectedGameListings';import UpcomingGameListings from'../GameListings/UpcomingGameListings';import{submitGame as _submitGame,confirmUserData as _confirmUserData,adjustPoints as _adjustPoints}from'../../redux/actions/user';import{connect}from'react-redux';var UpcomingAndSelected=/*#__PURE__*/function(_Component){_inherits(UpcomingAndSelected,_Component);var _super=_createSuper(UpcomingAndSelected);function UpcomingAndSelected(){var _this;_classCallCheck(this,UpcomingAndSelected);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={selectedGames:[]};_this.selectGame=function(game){if(!_this.state.selectedGames.find(function(theGame){return game.idEvent===theGame.idEvent;})){_this.setState({selectedGames:[].concat(_toConsumableArray(_this.state.selectedGames),[game])});}else{_this.setState({selectedGames:_toConsumableArray(_this.state.selectedGames)});}};_this.removeSelectedGame=function(game){var newSelectedGames=_this.state.selectedGames.filter(function(selectedGame){return game.idEvent!==selectedGame.idEvent;});_this.setState({selectedGames:newSelectedGames});};_this.submitSelectedGame=function(game){var newPoints=_this.props.user.betting_points-game.points_allocated;if(_this.props.isLoggedIn){if(newPoints>=0){return _this.props.submitGame(game),_this.props.adjustPoints(newPoints),_this.removeSelectedGame(game);}else{alert(\"Not enough points for this selection\");}}else{alert(\"Please log in to make selections.\");}};return _this;}_createClass(UpcomingAndSelected,[{key:\"render\",// console.log(\"game\", game)\n// console.log(\"beting points\", this.props.user.betting_points)\n// console.log(\"newPoints\", this.props.user.betting_points - game.betting_points)\n//   fetch(selectedGamesURL, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       \"Authorization\": `Bearer ${localStorage.token}`\n//     },\n//     body: JSON.stringify(game)\n//   }).then(response=> response.json()\n//   ).then(console.log)\n// } else {\n//   alert(\"Please log in to submit your picks\")\n// }\n//   if (this.props.isLoggedIn){\n//     if (this.props.user.betting_points - game.betting_points >= 0){\n//       fetch(selectedGamesURL, {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//           \"Authorization\": `Bearer ${localStorage.token}`\n//         },\n//         body: JSON.stringify(game)\n//       })\n//       .then(response => response.json())\n//       .then(result => {\n//         if (result.message === \"Accepted\"){\n//           return (\n//             // alert(\"Selection submitted\"),\n//             // this.removeSelectedGame(game),\n//             this.props.adjustUserBettingPoints(this.props.user.betting_points - game.betting_points)\n//             // this.props.refreshProfile()\n//           )\n//         } else {\n//           alert(\"Failed to submit, try refreshing the page\")\n//         } \n//       })\n//     } else alert(\"Not enough betting points to make a pick.\")\n//   } else {\n//     alert(\"Log in to submit your picks\")\n//   }\n// }\nvalue:function render(){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(UpcomingGameListings,{currentLeague:this.props.currentLeague,selectGame:this.selectGame}),/*#__PURE__*/React.createElement(SelectedGameListings,{selectedGames:this.state.selectedGames,submitSelectedGame:this.submitSelectedGame,removeSelectedGame:this.removeSelectedGame}));}}]);return UpcomingAndSelected;}(Component);function mapStateToProps(state){return{isLoggedIn:state.isLoggedIn,user:state.user};}function mapDispatchToProps(dispatch){return{confirmUserData:function confirmUserData(user){return dispatch(_confirmUserData(user));},submitGame:function submitGame(game){return dispatch(_submitGame(game));},adjustPoints:function adjustPoints(points){return dispatch(_adjustPoints(points));}};}export default connect(mapStateToProps,mapDispatchToProps)(UpcomingAndSelected);","map":{"version":3,"sources":["/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/src/components/containers/UpcomingAndSelectedGamesContainer.js"],"names":["React","Component","SelectedGameListings","UpcomingGameListings","submitGame","confirmUserData","adjustPoints","connect","UpcomingAndSelected","state","selectedGames","selectGame","game","find","theGame","idEvent","setState","removeSelectedGame","newSelectedGames","filter","selectedGame","submitSelectedGame","newPoints","props","user","betting_points","points_allocated","isLoggedIn","alert","currentLeague","mapStateToProps","mapDispatchToProps","dispatch","points"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport SelectedGameListings from '../GameListings/SelectedGameListings'\nimport UpcomingGameListings from '../GameListings/UpcomingGameListings'\nimport { submitGame, confirmUserData, adjustPoints } from '../../redux/actions/user'\n\nimport { connect } from 'react-redux'\n\nclass UpcomingAndSelected extends Component {\n    state = {\n        selectedGames: []\n    }\n\n    selectGame = (game) => {\n        if(!this.state.selectedGames.find(theGame => game.idEvent === theGame.idEvent)){\n          this.setState({\n            selectedGames: [...this.state.selectedGames, game]\n          })\n        } else {\n          this.setState({\n            selectedGames: [...this.state.selectedGames]\n          }) \n        }\n      }\n    \n    removeSelectedGame = (game) => {\n    let newSelectedGames = this.state.selectedGames.filter(selectedGame => game.idEvent !== selectedGame.idEvent)\n    this.setState({\n        selectedGames: newSelectedGames\n    })\n    }\n\n\n  submitSelectedGame = (game) => {\n    let newPoints = this.props.user.betting_points - game.points_allocated\n    if (this.props.isLoggedIn){\n      if (newPoints >= 0){\n        return (\n          this.props.submitGame(game),\n          this.props.adjustPoints(newPoints),\n          this.removeSelectedGame(game)\n        )\n      } else {\n        alert(\"Not enough points for this selection\")\n    }\n  } else {alert(\"Please log in to make selections.\")}\n}\n      // console.log(\"game\", game)\n      // console.log(\"beting points\", this.props.user.betting_points)\n      // console.log(\"newPoints\", this.props.user.betting_points - game.betting_points)\n    //   fetch(selectedGamesURL, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       \"Authorization\": `Bearer ${localStorage.token}`\n    //     },\n    //     body: JSON.stringify(game)\n    //   }).then(response=> response.json()\n    //   ).then(console.log)\n    // } else {\n    //   alert(\"Please log in to submit your picks\")\n    // }\n  \n  //   if (this.props.isLoggedIn){\n  //     if (this.props.user.betting_points - game.betting_points >= 0){\n  //       fetch(selectedGamesURL, {\n  //         method: \"POST\",\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           \"Authorization\": `Bearer ${localStorage.token}`\n  //         },\n  //         body: JSON.stringify(game)\n  //       })\n  //       .then(response => response.json())\n  //       .then(result => {\n  //         if (result.message === \"Accepted\"){\n  //           return (\n  //             // alert(\"Selection submitted\"),\n  //             // this.removeSelectedGame(game),\n  //             this.props.adjustUserBettingPoints(this.props.user.betting_points - game.betting_points)\n  //             // this.props.refreshProfile()\n  //           )\n  //         } else {\n  //           alert(\"Failed to submit, try refreshing the page\")\n  //         } \n  //       })\n  //     } else alert(\"Not enough betting points to make a pick.\")\n  //   } else {\n  //     alert(\"Log in to submit your picks\")\n  //   }\n  // }\n\n    \n    render() {\n        return (\n            <>\n                <UpcomingGameListings currentLeague = {this.props.currentLeague} selectGame= {this.selectGame} />\n                <SelectedGameListings selectedGames={this.state.selectedGames} submitSelectedGame={this.submitSelectedGame} removeSelectedGame={this.removeSelectedGame}/>\n            </>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state){\n  return {\n      isLoggedIn: state.isLoggedIn,\n      user: state.user,\n\n  }\n}\nfunction mapDispatchToProps(dispatch){\n  return {\n      confirmUserData: (user) => dispatch(confirmUserData(user)),\n      submitGame: (game) => dispatch(submitGame(game)),\n      adjustPoints: (points) => dispatch(adjustPoints(points)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpcomingAndSelected)\n"]},"metadata":{},"sourceType":"module"}