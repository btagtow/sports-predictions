{"ast":null,"code":"var _jsxFileName = \"/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/src/components/containers/UpcomingAndSelectedGamesContainer.js\";\nimport React, { Component } from 'react';\nimport SelectedGameListings from '../GameListings/SelectedGameListings';\nimport UpcomingGameListings from '../GameListings/UpcomingGameListings';\nimport { submitGame, confirmUserData, adjustPoints } from '../../redux/actions/user';\nimport { connect } from 'react-redux';\n\nclass UpcomingAndSelected extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedGames: []\n    };\n\n    this.selectGame = game => {\n      if (!this.state.selectedGames.find(theGame => game.idEvent === theGame.idEvent)) {\n        this.setState({\n          selectedGames: [...this.state.selectedGames, game]\n        });\n      } else {\n        this.setState({\n          selectedGames: [...this.state.selectedGames]\n        });\n      }\n    };\n\n    this.removeSelectedGame = game => {\n      let newSelectedGames = this.state.selectedGames.filter(selectedGame => game.idEvent !== selectedGame.idEvent);\n      this.setState({\n        selectedGames: newSelectedGames\n      });\n    };\n\n    this.submitSelectedGame = game => {\n      let newPoints = this.props.user.betting_points - game.points_allocated;\n\n      if (this.props.isLoggedIn) {\n        if (newPoints >= 0) {\n          return this.props.submitGame(game), this.props.adjustPoints(newPoints), this.removeSelectedGame(game);\n        } else {\n          alert(\"Not enough points for this selection\");\n        }\n      } else {\n        alert(\"Please log in to make selections.\");\n      }\n    };\n  }\n\n  // console.log(\"game\", game)\n  // console.log(\"beting points\", this.props.user.betting_points)\n  // console.log(\"newPoints\", this.props.user.betting_points - game.betting_points)\n  //   fetch(selectedGamesURL, {\n  //     method: \"POST\",\n  //     headers: {\n  //       \"Content-Type\": \"application/json\",\n  //       \"Authorization\": `Bearer ${localStorage.token}`\n  //     },\n  //     body: JSON.stringify(game)\n  //   }).then(response=> response.json()\n  //   ).then(console.log)\n  // } else {\n  //   alert(\"Please log in to submit your picks\")\n  // }\n  //   if (this.props.isLoggedIn){\n  //     if (this.props.user.betting_points - game.betting_points >= 0){\n  //       fetch(selectedGamesURL, {\n  //         method: \"POST\",\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           \"Authorization\": `Bearer ${localStorage.token}`\n  //         },\n  //         body: JSON.stringify(game)\n  //       })\n  //       .then(response => response.json())\n  //       .then(result => {\n  //         if (result.message === \"Accepted\"){\n  //           return (\n  //             // alert(\"Selection submitted\"),\n  //             // this.removeSelectedGame(game),\n  //             this.props.adjustUserBettingPoints(this.props.user.betting_points - game.betting_points)\n  //             // this.props.refreshProfile()\n  //           )\n  //         } else {\n  //           alert(\"Failed to submit, try refreshing the page\")\n  //         } \n  //       })\n  //     } else alert(\"Not enough betting points to make a pick.\")\n  //   } else {\n  //     alert(\"Log in to submit your picks\")\n  //   }\n  // }\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(UpcomingGameListings, {\n      currentLeague: this.props.currentLeague,\n      selectGame: this.selectGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(SelectedGameListings, {\n      selectedGames: this.state.selectedGames,\n      submitSelectedGame: this.submitSelectedGame,\n      removeSelectedGame: this.removeSelectedGame,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    isLoggedIn: state.isLoggedIn,\n    user: state.user\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    confirmUserData: user => dispatch(confirmUserData(user)),\n    submitGame: game => dispatch(submitGame(game)),\n    adjustPoints: points => dispatch(adjustPoints(points))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpcomingAndSelected);","map":{"version":3,"sources":["/Users/benjamintagtow/Desktop/job-search/projects/sports-predictor/sports-predictions-front/src/components/containers/UpcomingAndSelectedGamesContainer.js"],"names":["React","Component","SelectedGameListings","UpcomingGameListings","submitGame","confirmUserData","adjustPoints","connect","UpcomingAndSelected","state","selectedGames","selectGame","game","find","theGame","idEvent","setState","removeSelectedGame","newSelectedGames","filter","selectedGame","submitSelectedGame","newPoints","props","user","betting_points","points_allocated","isLoggedIn","alert","render","currentLeague","mapStateToProps","mapDispatchToProps","dispatch","points"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport SelectedGameListings from '../GameListings/SelectedGameListings'\nimport UpcomingGameListings from '../GameListings/UpcomingGameListings'\nimport { submitGame, confirmUserData, adjustPoints } from '../../redux/actions/user'\n\nimport { connect } from 'react-redux'\n\nclass UpcomingAndSelected extends Component {\n    state = {\n        selectedGames: []\n    }\n\n    selectGame = (game) => {\n        if(!this.state.selectedGames.find(theGame => game.idEvent === theGame.idEvent)){\n          this.setState({\n            selectedGames: [...this.state.selectedGames, game]\n          })\n        } else {\n          this.setState({\n            selectedGames: [...this.state.selectedGames]\n          }) \n        }\n      }\n    \n    removeSelectedGame = (game) => {\n    let newSelectedGames = this.state.selectedGames.filter(selectedGame => game.idEvent !== selectedGame.idEvent)\n    this.setState({\n        selectedGames: newSelectedGames\n    })\n    }\n\n\n  submitSelectedGame = (game) => {\n    let newPoints = this.props.user.betting_points - game.points_allocated\n    if (this.props.isLoggedIn){\n      if (newPoints >= 0){\n        return (\n          this.props.submitGame(game),\n          this.props.adjustPoints(newPoints),\n          this.removeSelectedGame(game)\n        )\n      } else {\n        alert(\"Not enough points for this selection\")\n    }\n  } else {alert(\"Please log in to make selections.\")}\n}\n      // console.log(\"game\", game)\n      // console.log(\"beting points\", this.props.user.betting_points)\n      // console.log(\"newPoints\", this.props.user.betting_points - game.betting_points)\n    //   fetch(selectedGamesURL, {\n    //     method: \"POST\",\n    //     headers: {\n    //       \"Content-Type\": \"application/json\",\n    //       \"Authorization\": `Bearer ${localStorage.token}`\n    //     },\n    //     body: JSON.stringify(game)\n    //   }).then(response=> response.json()\n    //   ).then(console.log)\n    // } else {\n    //   alert(\"Please log in to submit your picks\")\n    // }\n  \n  //   if (this.props.isLoggedIn){\n  //     if (this.props.user.betting_points - game.betting_points >= 0){\n  //       fetch(selectedGamesURL, {\n  //         method: \"POST\",\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //           \"Authorization\": `Bearer ${localStorage.token}`\n  //         },\n  //         body: JSON.stringify(game)\n  //       })\n  //       .then(response => response.json())\n  //       .then(result => {\n  //         if (result.message === \"Accepted\"){\n  //           return (\n  //             // alert(\"Selection submitted\"),\n  //             // this.removeSelectedGame(game),\n  //             this.props.adjustUserBettingPoints(this.props.user.betting_points - game.betting_points)\n  //             // this.props.refreshProfile()\n  //           )\n  //         } else {\n  //           alert(\"Failed to submit, try refreshing the page\")\n  //         } \n  //       })\n  //     } else alert(\"Not enough betting points to make a pick.\")\n  //   } else {\n  //     alert(\"Log in to submit your picks\")\n  //   }\n  // }\n\n    \n    render() {\n        return (\n            <>\n                <UpcomingGameListings currentLeague = {this.props.currentLeague} selectGame= {this.selectGame} />\n                <SelectedGameListings selectedGames={this.state.selectedGames} submitSelectedGame={this.submitSelectedGame} removeSelectedGame={this.removeSelectedGame}/>\n            </>\n        )\n    }\n}\n\n\nfunction mapStateToProps(state){\n  return {\n      isLoggedIn: state.isLoggedIn,\n      user: state.user,\n\n  }\n}\nfunction mapDispatchToProps(dispatch){\n  return {\n      confirmUserData: (user) => dispatch(confirmUserData(user)),\n      submitGame: (game) => dispatch(submitGame(game)),\n      adjustPoints: (points) => dispatch(adjustPoints(points)),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpcomingAndSelected)\n"]},"metadata":{},"sourceType":"module"}